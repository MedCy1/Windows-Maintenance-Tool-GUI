// Fonctions d'ex√©cution des commandes

// V√©rifier les privil√®ges administrateur
async function checkAdminPrivileges() {
    try {
        const isAdmin = await ipcRenderer.invoke('check-admin-privileges');
        
        if (isAdmin) {
            addOutputLine('‚úÖ Privil√®ges administrateur : ACTIFS', 'success');
        } else {
            addOutputLine('‚ö†Ô∏è Privil√®ges administrateur : NON ACTIFS (certaines fonctions limit√©es)', 'warning');
            addOutputLine('üí° Astuce: Lancez en tant qu\'administrateur pour toutes les fonctionnalit√©s', 'info');
        }
        
        return isAdmin;
    } catch (error) {
        addOutputLine('‚ùå Impossible de v√©rifier les privil√®ges administrateur', 'error');
        return false;
    }
}

// Ex√©cuter une commande - RETOUR √Ä L'APPROCHE D'ORIGINE
async function executeCommand(commandKey) {
    if (AppState.isExecuting) {
        showNotification('Une commande est d√©j√† en cours d\'ex√©cution', 'warning');
        return;
    }

    const cmd = Commands[commandKey];
    if (!cmd) {
        showNotification('Commande non trouv√©e', 'error');
        return;
    }

    // Gestion des commandes personnalis√©es
    if (cmd.customHandler) {
        handleCustomCommand(commandKey);
        return;
    }

    // Confirmation pour les commandes sensibles (approche d'origine)
    if (cmd.requiresAdmin) {
        const confirmed = await showConfirmModal(
            'Privil√®ges administrateur requis',
            `Cette op√©ration n√©cessite des privil√®ges administrateur : ${cmd.description}\n\nWindows va vous demander de confirmer l'√©l√©vation.\n\nVoulez-vous continuer ?`
        );
        
        if (!confirmed) {
            return;
        }
    }

    AppState.isExecuting = true;
    updateStatus(`Ex√©cution: ${cmd.description}`, 'working');
    setProgress(10);

    addOutputLine(`üöÄ D√©marrage: ${cmd.description}`, 'command');
    addOutputLine(`üíª Commande: ${cmd.command}`, 'info');

    try {
        setProgress(30);
        
        let result;
        if (cmd.requiresAdmin) {
            addOutputLine('üîê Demande d\'√©l√©vation des privil√®ges...', 'warning');
            result = await ipcRenderer.invoke('execute-admin-command', cmd.command, cmd.description);
        } else {
            result = await ipcRenderer.invoke('execute-command', cmd.command, cmd.description);
        }

        setProgress(80);

        if (result.success) {
            addOutputLine(`‚úÖ Termin√©: ${cmd.description}`, 'success');
            
            // Afficher la sortie seulement si elle n'a pas √©t√© affich√©e en temps r√©el
            if (!result.hasRealTimeOutput && result.output && result.output.trim()) {
                addOutputLine(`üìÑ R√©sultat final:`, 'info');
                result.output.split('\n').forEach(line => {
                    if (line.trim()) {
                        addOutputLine(line.trim(), 'info');
                    }
                });
            } else if (result.hasRealTimeOutput) {
                addOutputLine(`üìÑ Sortie affich√©e en temps r√©el ci-dessus`, 'info');
            }
            
            // Messages contextuels
            if (cmd.command.includes('sfc /scannow')) {
                addOutputLine(`üí° Note: Si un red√©marrage est requis, red√©marrez et relancez SFC`, 'warning');
            } else if (cmd.command.includes('dism')) {
                addOutputLine(`üí° DISM termin√© - v√©rifiez les messages ci-dessus`, 'info');
            }
            
            showNotification('Commande ex√©cut√©e avec succ√®s', 'success');
        } else {
            addOutputLine(`‚ùå Erreur lors de l'ex√©cution: ${cmd.description}`, 'error');
            
            if (result.error && result.error.trim()) {
                addOutputLine(`üìÑ D√©tails de l'erreur:`, 'error');
                result.error.split('\n').forEach(line => {
                    if (line.trim()) {
                        addOutputLine(line.trim(), 'error');
                    }
                });
            }
            
            // Messages d'aide simples
            if (cmd.requiresAdmin && result.code !== 0) {
                addOutputLine(`üí° L'√©l√©vation des privil√®ges a peut-√™tre √©t√© refus√©e`, 'warning');
            }
            
            showNotification('Erreur lors de l\'ex√©cution', 'error');
        }

        setProgress(100);
        setTimeout(() => {
            updateStatus('Pr√™t', 'success');
            setProgress(0);
        }, 1000);

    } catch (error) {
        addOutputLine(`‚ùå Erreur fatale: ${error.message}`, 'error');
        showNotification('Erreur fatale lors de l\'ex√©cution', 'error');
        
        updateStatus('Erreur', 'error');
        setProgress(0);
    } finally {
        AppState.isExecuting = false;
        addOutputLine('‚îÄ'.repeat(60), 'info');
    }
}

// Gestion des commandes personnalis√©es
function handleCustomCommand(commandKey) {
    switch (commandKey) {
        case 'chkdsk':
            handleChkdskCommand();
            break;
        case 'registry-cleanup':
            handleRegistryCleanup();
            break;
        default:
            addOutputLine(`‚ùå Gestionnaire personnalis√© non trouv√© pour: ${commandKey}`, 'error');
    }
}

// Gestionnaire CHKDSK personnalis√©
async function handleChkdskCommand() {
    const confirmed = await showConfirmModal(
        'CHKDSK - Scan d\'erreurs',
        'Cette op√©ration va scanner tous vos disques √† la recherche d\'erreurs.\nCela peut prendre beaucoup de temps.\n\nVoulez-vous continuer ?'
    );
    
    if (!confirmed) return;

    AppState.isExecuting = true;
    updateStatus('Scan CHKDSK en cours...', 'working');
    
    addOutputLine('üîç D√©marrage du scan CHKDSK sur tous les disques', 'command');
    
    try {
        // Obtenir la liste des disques
        const result = await ipcRenderer.invoke('execute-command', 'wmic logicaldisk get size,freespace,caption', 'Liste des disques');
        
        if (result.success && result.output) {
            addOutputLine('üìÄ Disques d√©tect√©s:', 'info');
            addOutputLine(result.output, 'info');
            
            // Simuler l'ex√©cution CHKDSK (en r√©alit√©, CHKDSK n√©cessite un red√©marrage)
            addOutputLine('‚ö†Ô∏è Note: CHKDSK complet n√©cessite un red√©marrage syst√®me', 'warning');
            addOutputLine('üí° Utilisation: chkdsk C: /f /r (remplacez C: par votre disque)', 'info');
            
            showNotification('Informations CHKDSK affich√©es', 'info');
        }
    } catch (error) {
        addOutputLine(`‚ùå Erreur: ${error.message}`, 'error');
        showNotification('Erreur lors de l\'analyse des disques', 'error');
    } finally {
        AppState.isExecuting = false;
        updateStatus('Pr√™t', 'success');
    }
}

// Gestionnaire nettoyage registre
function handleRegistryCleanup() {
    addOutputLine('üìù === NETTOYAGE DU REGISTRE ===', 'warning');
    addOutputLine('‚ö†Ô∏è  Le nettoyage du registre est une op√©ration tr√®s sensible', 'warning');
    addOutputLine('üí° Recommandations:', 'info');
    addOutputLine('   ‚Ä¢ Utilisez l\'outil int√©gr√© Windows "regedit"', 'info');
    addOutputLine('   ‚Ä¢ Cr√©ez toujours une sauvegarde avant modification', 'info');
    addOutputLine('   ‚Ä¢ Utilisez des outils sp√©cialis√©s comme CCleaner', 'info');
    addOutputLine('   ‚Ä¢ √âvitez les modifications manuelles si vous n\'√™tes pas expert', 'info');
    addOutputLine('üîí Pour votre s√©curit√©, aucune modification automatique n\'est effectu√©e', 'success');
    
    showNotification('Recommandations de s√©curit√© affich√©es', 'info');
    updateStatus('Recommandations affich√©es', 'success');
}